using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace GameProject
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    /// 
    enum GameMode
    {
        normal,
        oneLightInTheDark,
        strobe
    }
    enum Gamestate
    {
        Menu,
        charSelect,
        ModeSelect,
        Game
    }
    struct Camera2d
    {
        public Vector2 Position; 
        // Camera Position
        public Matrix getCam()
        {
            return Matrix.CreateTranslation(new Vector3(-Position.X, -Position.Y, 0));
        }
    }

    public class Game1 : Microsoft.Xna.Framework.Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;
        public static readonly Random RNG = new Random();
        const int RAINCOUNT = 200;

        BasicGraphic GameBackground;


        List<PlayerClass> Players;

        MenuClass mainMenu;
        CharacterSelect charMenu;
        ModeSelect modeMenu;


        GameMode gameMode;

        int PlayerCount;
        Gamestate gamestate;

        //shaders
        List<LitSprite> litSprites;
        RenderTarget2D preCanvas, lightmask;
        Effect lightShader;

        bool cammoveup;
        bool cammovedown;

        Camera2d cam;

        List<PlayerInput> pads;
        GamePadState gp_Curr;
        GamePadState gp_Old;
        public static SpriteFont debug;
        List<rain> RainL;
        List<Map> currentMap;
        Map map;
        int CurrMap;

        public Game1()
        {
            
            graphics = new GraphicsDeviceManager(this);
            graphics.PreferredBackBufferHeight = 768;
            graphics.PreferredBackBufferWidth = 960;
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here


            //graphics.SynchronizeWithVerticalRetrace = false;
            //IsFixedTimeStep = false;
            //graphics.ApplyChanges();
            PresentationParameters pp = GraphicsDevice.PresentationParameters;

           

            //shaders
            litSprites = new List<LitSprite>();
            lightShader = Content.Load<Effect>("LightShader");
            preCanvas = new RenderTarget2D(GraphicsDevice, pp.BackBufferWidth, pp.BackBufferHeight);
            lightmask = new RenderTarget2D(GraphicsDevice, pp.BackBufferWidth, pp.BackBufferHeight);
            GameBackground = new BasicGraphic(Content.Load<Texture2D>("bTiles//Background1"), new Rectangle(0,0,graphics.PreferredBackBufferWidth, graphics.PreferredBackBufferHeight));

            gamestate = new Gamestate();
            gamestate = Gamestate.Menu;
            currentMap = new List<Map>();
            map = new Map();
            pads = new List<PlayerInput>();
            Players = new List<PlayerClass>();
            RainL = new List<rain>();
            cam.Position = Vector2.Zero;

            base.Initialize();
            
        }
       
        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            


            debug = Content.Load<SpriteFont>("TextureSize12");

            mainMenu = new MenuClass(Content);
            charMenu = new CharacterSelect(Content);
            modeMenu = new ModeSelect(Content);

            PlayerCount = PlayerCount + 1;
            pads.Add(new PlayerInput(PlayerIndex.One));

            PlayerCount = PlayerCount + 1;
            pads.Add(new PlayerInput(PlayerIndex.Two));

            PlayerCount = PlayerCount + 1;
            pads.Add(new PlayerInput(PlayerIndex.Three));

            PlayerCount = PlayerCount + 1;
            pads.Add(new PlayerInput(PlayerIndex.Four));


            #region menu
            for (int i = 0; i < RAINCOUNT; i++)
            {
                RainL.Add(new rain(Content.Load<Texture2D>("RainPixel"), new Rectangle(0, 0, 2, 10)));
            }

            if (GamePad.GetCapabilities(PlayerIndex.One).IsConnected)
                Players.Add(new PlayerClass(Content.Load<Texture2D>("Character1Walking"), new Rectangle(68, 100, 30, 48), 10, 3, Content, Color.GreenYellow, Content.Load<Texture2D>("lightaura")));
            if (GamePad.GetCapabilities(PlayerIndex.Two).IsConnected)
                Players.Add(new PlayerClass(Content.Load<Texture2D>("Character1Walking"), new Rectangle(864, 100, 30, 48), 10, 3, Content, Color.GreenYellow, Content.Load<Texture2D>("lightaura")));
            if (GamePad.GetCapabilities(PlayerIndex.Three).IsConnected)
                Players.Add(new PlayerClass(Content.Load<Texture2D>("Character1Walking"), new Rectangle(400, 300, 30, 48), 10, 3, Content, Color.GreenYellow, Content.Load<Texture2D>("lightaura")));
            if (GamePad.GetCapabilities(PlayerIndex.Four).IsConnected)
                Players.Add(new PlayerClass(Content.Load<Texture2D>("Character1Walking"), new Rectangle(100, 100, 30, 48), 10, 3, Content, Color.GreenYellow, Content.Load<Texture2D>("lightaura")));

            Tiles.Content = Content;

            currentMap.Add(new Map());
            currentMap.Add(new Map());
            currentMap.Add(new Map());
            CurrMap = 1;
            for (int i = 0; i < currentMap.Count; i++)
            {
                mapGen(i);
            }

            #endregion

            torches.m_aura = Content.Load<Texture2D>("lightaura");

            // TODO: use this.Content to load your game content here
        }

        public void mapGen(int currMap)
        {
            if (currMap == 0)
            {
                #region map1
                currentMap[0].Generate(new int[,]{
                {4,4,4,4,2,4,4,4,4,4,4,4,4,8,0,0,8,4,4,3,4,4,4,4,4,4,4,2,4,4,},
                {4,8,8,8,5,7,8,6,8,8,6,7,8,8,0,0,8,8,5,6,7,8,8,8,8,8,8,4,4,3,},
                {8,8,7,8,0,0,0,0,0,0,0,0,8,8,0,0,8,8,0,0,0,0,0,0,0,0,8,8,8,8,},
                {6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
                {6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,},
                {6,0,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,0,1,},
                {6,0,0,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,0,0,1,},
                {8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,},
                {4,4,8,0,8,0,0,0,0,8,8,0,0,0,0,0,0,0,0,8,8,0,0,0,0,8,0,8,2,4,},
                {4,4,6,0,0,0,8,0,0,8,8,0,8,0,0,0,0,8,0,8,8,0,0,8,0,0,0,1,4,4,},
                {3,4,6,0,0,0,0,0,0,8,8,0,8,8,0,0,8,8,0,8,8,0,0,0,0,0,0,1,3,4,},
                {4,4,6,0,0,0,0,0,0,8,8,0,0,0,0,0,0,0,0,8,8,0,0,0,0,0,0,1,4,4,},
                {4,2,6,0,0,0,0,0,8,8,8,0,0,0,0,0,0,0,0,8,8,8,0,0,0,0,0,1,4,4,},
                {4,4,6,0,0,0,0,8,8,8,8,0,0,0,0,0,0,0,0,8,8,8,8,0,0,0,0,1,4,4,},
                {4,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,2,},
                {4,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,4,},
                {4,6,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,1,4,},
                {4,8,8,0,0,0,0,0,0,0,0,0,8,0,0,0,0,8,0,0,0,0,0,0,0,0,0,8,8,4,},
                {4,4,6,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,0,0,0,0,0,0,0,0,0,1,4,4,},
                {2,4,8,8,0,0,0,8,8,0,0,0,0,0,0,0,0,0,0,0,0,8,8,0,0,0,8,8,4,4,},
                {4,4,4,8,4,2,4,8,8,0,0,0,0,0,0,0,0,0,0,0,0,8,8,1,4,3,8,4,4,4,},
                {4,4,4,4,4,4,2,4,6,0,0,0,0,0,0,0,0,0,0,0,0,1,2,4,4,4,4,4,4,4,},
                {4,4,3,4,4,4,4,4,8,2,4,2,3,8,0,0,8,2,3,1,2,8,4,4,4,2,4,4,4,4,},
                {4,4,4,4,2,4,4,4,4,3,4,4,2,6,0,0,1,4,4,2,4,4,4,4,4,4,4,4,3,4,},
                {4,4,4,4,4,4,4,4,4,2,4,4,4,8,0,0,8,3,4,4,4,4,4,3,4,4,4,4,4,4,},
                {4,4,4,4,4,4,4,4,4,2,4,4,4,8,0,0,8,3,4,4,4,4,4,3,4,4,4,4,4,4,},
              
            }, 32, Content, 4);

                currentMap[0].genBackground(new int[,] {
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,10,10,10,10,10,10,10, 0,0 ,0 , 0, 0,0 ,0 , 0,10,10,10,10,10,10,10,0 ,0 ,0 ,0 ,},
            {0 ,10,10,10,10,10,10,10,10,10,10, 0, 0, 0, 0, 0, 0, 0, 0,10,10,10,10,10,10,10,10,10,10,0 ,},
            {0 ,10,10,10,10,10,10,10,10,10,10,10, 0, 0, 0, 0, 0, 0,10,10,10,10,10,10,10,10,10,10,10,0 ,},
            {0 ,10,10,10,0 ,0 ,0 ,10,10,10,10,10,10, 0, 0, 0, 0,10,10,10,10,10,10,0 ,0 ,0 ,10,10,10,0 ,},
            {0 ,10,10,0 ,0 ,0 ,10,10,10,10,10,10,10, 0, 0, 0, 0,10,10,10,10,10,10,10,0 ,0 ,0 ,10,10,0 ,},
            {0 ,0 ,0 ,0 ,0 ,10,10,10,10,10,10,10,10, 0, 0, 0, 0,10,10,10,10,10,10,10,10,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,10,0 ,10,10,10,10,0 ,0 ,10, 0, 0, 0, 0, 0, 0,10,0 ,0 ,10,10,10,10,0 ,10,0 ,0 ,0 ,},
            {0 ,0 ,0 ,10,10,10,10,10,10,0 ,0 ,10, 0, 0, 0, 0, 0, 0,10,0 ,0 ,10,10,10,10,10,10,0 ,0 ,0 ,},
            {0 ,0 ,0 ,10,10,10,10,10,10,0 ,0 ,10, 0, 0, 0, 0, 0, 0,10,0 ,0 ,10,10,10,10,10,10,0 ,0 ,0 ,},
            {0 ,0 ,0 ,10,10,10,10,10,10,0 ,0 ,10, 0, 0, 0, 0, 0, 0,10,0 ,0 ,10,10,10,10,10,10,0 ,0 ,0 ,},
            {0 ,0 ,0 ,10,10,10,10,10,10,0 ,0 ,10, 0, 0, 0, 0, 0, 0,10,0 ,0 ,10,10,10,10,10,10,0 ,0 ,0 ,},
            {0 ,0 ,0 ,10,10,10,10,10,10,10,10,10, 0, 0, 0, 0, 0, 0,10,10,10,10,10,10,10,10,10,0 ,0 ,0 ,},
            {0 ,0 ,0 ,10,10,10,10,10,10,10,10,10, 0, 0, 0, 0, 0, 0,10,10,10,10,10,10,10,10,10,0 ,0 ,0 ,},
            {0 ,0 ,10,10,10,10,10,10,10,10,10,10, 0, 0, 0, 0, 0, 0,10,10,10,10,10,10,10,10,10,10,0 ,0 ,},
            {0 ,0 ,10,10,10,10,10,10,10,10,10, 0, 0, 0, 0, 0, 0, 0, 0,10,10,10,10,10,10,10,10,10,0 ,0 ,},
            {0 ,0 ,0 ,10,10,10,10,10,10,10,10, 0,0 , 0, 0, 0, 0,0 , 0,10,10,10,10,10,10,10,10,0 ,0 ,0 ,},
            {0 ,0 ,0 ,10,10,10,10,10,10,10,10, 0,0 , 0, 0, 0, 0,0 , 0,10,10,10,10,10,10,10,10,0 ,0 ,0 ,},
            {2 ,0 ,0 ,0 ,10,10,10,0 ,0 ,10,10, 0, 0, 0, 0, 0, 0, 0, 0,10,10,0 ,0 ,10,10,10,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,10,10,10,10, 0, 0, 0, 0,10,10,10,10,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,10,10,10,10,10, 0, 0,10,10,10,10,10,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            }, 32);

                currentMap[0].genAnimated(new int[,] {
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
 }, 32);


                #endregion
            }
            else if (currMap == 1)
            {
                #region map 2
                currentMap[1].Generate(new int[,] {
                {16,19, 0, 0, 0,21,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18, 0, 0, 0,23,16,},
                {16,17, 0, 0, 0,28, 5, 6, 8, 7,36,16,16,16,16,16,16,16,16,35, 5, 8, 7, 6,27, 0, 0, 0,22,16,},
                {35,27, 0, 0, 0, 0, 0, 0, 0, 0,28,36,16,16,16,16,16,16,35,27, 0, 0, 0, 0, 0, 0, 0, 0,28,36,},
                {17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28, 5,36,16,16,35, 7,27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,21,},
                {18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28,36,35,27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,24,},
                {20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28,27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,21,},
                {19, 0, 0, 0,34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,34, 0, 0, 0,21,},
                {38, 3, 2,30,27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28,30, 3, 2,37,},
                {16,16,19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,24,16,16,},
                {16,16,17, 0, 0, 0, 0,29,30,31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,29,30,31, 0, 0, 0, 0,23,16,16,},
                { 5, 8,27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28, 7, 8,},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,29,30,30,31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
                { 2, 4,26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,25, 3, 4,},
                {16,16,17, 0, 0, 0, 0, 0,29,30,31, 0, 0, 0, 0, 0, 0, 0, 0,29,30,31, 0, 0, 0, 0, 0,22,16,16,},
                {16,16,18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,21,16,16,},
                {16,16,38, 3,31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,29, 4,37,16,16,},
                {16,35,8, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28, 6,36,16,},
                {16,17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,25, 3, 4,26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,24,16,},
                {16,19, 0, 0, 0, 0,25, 3,26, 0, 0, 0, 0,24,16,16,21, 0, 0, 0, 0,25, 3,26, 0, 0, 0, 0,23,16,},
                {16,20, 0, 0, 0,25,37,16,18, 0, 0, 0, 0,21,16,16,23, 0, 0, 0, 0,23,16,38,26, 0, 0, 0,21,16,},
                {16,18, 0, 0, 0,21,16,16,38, 2, 3, 1, 4,37,16,16,38, 3, 4, 2, 1,37,16,16,19, 0, 0, 0,24,16,},
                {16,19, 0, 0, 0,23,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,20, 0, 0, 0,23,16,},
                {16,17, 0, 0, 0,24,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17, 0, 0, 0,21,16,},
                {16,17, 0, 0, 0,22,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,18, 0, 0, 0,22,16,}
                ,}, 32, Content, 4);

                currentMap[1].genBackground(new int[,] {
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,0 ,0 ,},
            {0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,},
            {0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,},
            {0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,},
            {0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,},
            {0 ,0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,0 ,},
            {0 ,0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,0 ,},
            {0 ,0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,0 ,},
            {0 ,0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,0 ,},
            { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,},
            { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,},
            { 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,},
            {0 ,0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,0 ,},
            {0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,},
            {0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,},
            {0 ,0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,0 ,},
            {0 ,0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,0 ,},
            {2 ,0 ,0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 , 0, 0,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            }, 32);

                currentMap[1].genAnimated(new int[,] {
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
 }, 32);
                #endregion
            }
            else if (currMap == 2)
            {
                #region map 3
                currentMap[currMap].Generate(new int[,] {
                {16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,},
                {16,16,16,16,16,35, 5, 6, 8, 7,36,16,16,16,16,16,16,16,16,35, 5, 8, 7, 6,36,16,16,16,16,16,},
                {35, 5, 8, 7, 6,27, 0, 0, 0, 0,28,36,16,16,16,16,16,16,35,27, 0, 0, 0, 0,28, 8, 8, 8, 8,36,},
                {17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28, 5,36,16,16,35, 7,27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,21,},
                {18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28,36,35,27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,24,},
                {20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28,27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,21,},
                {19, 0, 0, 0,34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,34, 0, 0, 0,23,},
                {38, 2, 3,30,27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28,30, 2, 3,37,},
                {16,16,20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,21,16,16,},
                {16,16,17, 0, 0, 0, 0,29,30,31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,29,30,31, 0, 0, 0, 0,22,16,16,},
                {16,16,38,26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,25,37,16,16,},
                {16,16,16,18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,24,16,16,16,},
                {16,16,16,20, 0, 0, 0, 0, 0, 0, 0, 0, 0,29,30,30,31, 0, 0, 0, 0, 0, 0, 0, 0, 0,23,16,16,16,},
                {16,16,16,19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,22,16,16,16,},
                {16,16,35,27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,28,36,16,16,},
                {16,16,18, 0, 0, 0, 0, 0,29,30,31, 0, 0, 0, 0, 0, 0, 0, 0,29,30,31, 0, 0, 0, 0, 0,24,16,16,},
                {16,16,17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,21,16,16,},
                {16,16,38, 1,26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,25, 2,37,16,16,},
                {16,35, 8, 8, 8,31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,29, 5, 7, 8,36,16,},
                {16,18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,25,26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,22,16,},
                {16,17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,23,17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,23,16,},
                {16,20, 0, 0, 0,25, 2, 3, 1, 4,26, 0, 0, 0,23,17, 0, 0, 0,25, 1, 2, 3, 4,26, 0, 0, 0,24,16,},
                {16,38, 2, 1, 4,37,16,16,16,16,38, 2, 4, 3,37,38, 1, 4, 2,37,16,16,16,16,38, 3, 2, 4,37,16,},
                {16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,},
                {16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16, 3, 8, 0, 0, 0,16,16,},
                {16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16, 0, 0, 0,16,16,}
                ,}, 32, Content, 4);

                currentMap[currMap].genBackground(new int[,] {
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
            { 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0,},
            { 0, 3, 3, 3, 3, 3, 3, 3, 3, 3,15, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3,10, 3, 0, 0, 0, 0, 0,},
            { 0, 3, 9, 3, 3, 4, 3, 6, 3, 3,14, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 9, 3, 3, 3, 0, 0, 0,},
            { 0, 3, 3, 6, 3, 3, 3, 3, 9, 3,14, 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0,},
            { 0, 3, 3, 3, 7, 3, 3, 6, 3, 3,14, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0,},
            { 0, 0, 0, 3, 3, 3, 3, 3, 3, 3,14, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0,},
            { 0, 0, 0, 3, 3,10, 3, 3, 3, 3,14, 0, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0,},
            { 0, 0, 0, 3, 3, 3, 3, 3, 3, 3,14, 0, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 6, 3, 3, 3, 0, 0, 0,},
            { 0, 0, 0, 3, 2, 3, 1, 9, 3, 3,14, 0, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0,},
            { 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,14, 0, 3, 3, 3, 3, 3, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3,},
            { 3, 3, 3, 6, 3, 3, 3, 3, 3, 3,20, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0, 6, 3, 3, 3, 3, 3, 3, 3, 3,},
            { 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3,},
            { 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 3, 3, 3, 3, 0, 3, 0, 0, 3, 3, 3, 3,10, 3, 0, 0, 0,},
            { 0, 0, 3, 3, 3, 3,10, 3, 3, 0, 0, 0, 0,13, 3, 5,14, 0, 3, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0,},
            { 0, 0, 3, 3, 3, 3, 3, 3,14, 0, 0, 0, 0,13, 5, 4,14, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0,},
            { 0, 0, 0, 0, 6, 3, 3, 3,20, 0, 0, 0, 0,13, 4, 3,14, 0, 0, 0, 0, 9, 3, 3,10, 3, 3, 0, 0, 0,},
            { 0, 0, 0, 0, 0, 0, 0,19, 0, 0, 0, 0, 0,20,12,12,20, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0,},
            { 2, 0, 3, 3, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0,},
            { 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
            { 0, 3, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
            { 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
            { 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
            { 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
            { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
            }, 32);

                currentMap[currMap].genAnimated(new int[,] {
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,2 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
            {0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,},
 }, 32);
                #endregion
            }
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            // Allows the game to exit
            
            gp_Curr = GamePad.GetState(PlayerIndex.One);
            
            if (gamestate == Gamestate.Menu)
            {
                

                menuinput();
                if (cammoveup == true)
                {
                    cameraMoveUp();
                }
                else if (cammovedown == true)
                {
                    cameraMoveDown();
                }

                charMenu.updateme(gameTime, ref cam, Content, pads, ref Players, ref gamestate);
                mainMenu.updateme(gameTime, gp_Curr, gp_Old, cammoveup, cammovedown, this);
            }

            if (gamestate == Gamestate.ModeSelect)
            {
                modeMenu.updateme(gameTime, pads, ref gamestate, ref gameMode, ref cam);
            }


            #region Game
            if (gamestate == Gamestate.Game)
            {
                //if (GamePad.GetState(PlayerIndex.One).Buttons.Y == ButtonState.Pressed)
                //{
                //    Initialize();
                //    //LoadContent();
                //}

             

                for (int i = 0; i < RAINCOUNT; i++)
                {
                    RainL[i].updateme(gameTime);
                }

                for (int i = 0; i < litSprites.Count; i++)
                {
                    litSprites[i].updateme(gameTime);
                }


                for (int i = 0; i < Players.Count; i++)
                {
                    PlayerIndex temp;
                    switch (i)
                    {
                        case 0:
                            temp = PlayerIndex.One;
                            break;
                        case 1:
                            temp = PlayerIndex.Two;
                            break;
                        case 2:
                            temp = PlayerIndex.Three;
                            break;
                        case 3:
                            temp = PlayerIndex.Four;
                            break;
                        default:
                            temp = PlayerIndex.One;
                            break;
                    }
                    Players[i].updatePlayer(gameTime, temp, Content, charMenu.splash[i].TC, new Rectangle(0,0,graphics.PreferredBackBufferWidth, graphics.PreferredBackBufferHeight));

                }


                currentMap[CurrMap].updateme(gameTime, Content, Players, gameMode);
                foreach (CollisionTiles tile in currentMap[CurrMap].CollisionTiles)
                {
                    for (int k = 0; k < Players.Count; k++)
                    {
                        Players[k].Collision(tile.Rectangle, GraphicsDevice.Viewport.Bounds, currentMap[CurrMap].Width, currentMap[CurrMap].Height, Content);
                    }
                }

                if (Keyboard.GetState().IsKeyDown(Keys.A))
                    CurrMap = Game1.RNG.Next(0, 3);

            }
            #endregion


            // TODO: Add your update logic here

            base.Update(gameTime);

            for (int i =0; i < pads.Count; i++)
                pads[i].MakeMe();

            gp_Old = gp_Curr;
        }

        public void Quit()
        {
            this.Exit();
        }

        public void cameraMoveUp()
        {
            if (cam.Position.Y > -768)
            {
                cam.Position.Y = cam.Position.Y - 12;
            }
            else if (cam.Position.Y == -768)
            {
                cammoveup = false;
            }
        }

        public void cameraMoveDown()
        {
            if (cam.Position.Y < 0)
            {
                cam.Position.Y = cam.Position.Y + 12;
            }
            else if (cam.Position.Y == 0)
            {
                cammovedown = false;
            }
        }

        public void menuinput()
        {
            if (gp_Curr.Buttons.A == ButtonState.Pressed)
            {
                if (cam.Position.Y == 0)
                {
                    if (mainMenu.currentSel == 0)
                    {
                        cammoveup = true;
                    }
                }
            }

            for (int i = 0; i < pads.Count; i++)
            {
                if (charMenu.splash[i].tbool == false)
                {
                    if (pads[i].IsDown(Buttons.B))
                    {
                        if (cam.Position.Y == -768)
                        {
                            if (cammovedown == false)
                            {
                                cammovedown = true;
                            }
                        }
                    }
                }
            }
        }


        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            //generate the scene



            if (gamestate == Gamestate.Game)
            {
                GraphicsDevice.SetRenderTarget(preCanvas);
                GraphicsDevice.Clear(Color.Black);
            }
            spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, SamplerState.PointClamp, DepthStencilState.Default, RasterizerState.CullNone, null, cam.getCam());
            if (gamestate == Gamestate.Menu)
            {
                mainMenu.drawme(spriteBatch);
                charMenu.drawme(spriteBatch);
            }

            if (gamestate == Gamestate.ModeSelect)
            {
                modeMenu.drawme(spriteBatch);
            }


            #region game
            if (gamestate == Gamestate.Game)
            {             
                //for (int i = 0; i < RAINCOUNT; i++)
                //{
                //    RainL[i].drawme(spriteBatch);
                //}
                GameBackground.drawme(spriteBatch);
                currentMap[CurrMap].Draw(spriteBatch);

                for (int i = 0; i < Players.Count; i++)
                {
                    Players[i].drawme(spriteBatch);
                }              
            }
            #endregion
            spriteBatch.End();
            

            if (gamestate == Gamestate.Game)
            {
                graphics.GraphicsDevice.SetRenderTarget(null);
                //draw light mask
                GraphicsDevice.SetRenderTarget(lightmask);
                //GraphicsDevice.Clear(Color.Black);
                spriteBatch.Begin();

                
                
                    for (int i = 0; i < Players.Count; i++)
                    {
                        Players[i].Drawmask(spriteBatch);
                    }

                    currentMap[CurrMap].DrawMaskChest(spriteBatch);
                spriteBatch.End();
                graphics.GraphicsDevice.SetRenderTarget(null);


                //draw the scene
                lightShader.Parameters["maskTexture"].SetValue(lightmask);
                spriteBatch.Begin(SpriteSortMode.Deferred, BlendState.AlphaBlend, null, null, null, lightShader);
                spriteBatch.Draw(preCanvas, Vector2.Zero, Color.White);
                spriteBatch.End();

            }
            base.Draw(gameTime);
        }
    }
}
